// ****************************************************************************
//  slideshow_3d2.xl                                                Tao project
// ****************************************************************************
// 
//   File Description:
// 
//    Implement some 3D slide show
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This software is property of Taodyne SAS - Confidential
// Ce logiciel est la propriété de Taodyne SAS - Confidentiel
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2011 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

import Animate


/******************************************************************************
*                                                                             *
*                                                                             *
*                            Sphere slider                                    *
*                                                                             *
*                                                                             *
*******************************************************************************/

// Reset to 0 before calling show_image
image_index -> 0
image_index := 0

// Set to 1.0 to draw front pictures, -1.0 to draw back pictures
show_front -> 1.0
show_front := 1.0

// Maximum number of images on the sphere
SHOWN -> 36
SHOWN := 36
// Image width (px)
SIZE -> 300
SIZE := 300
// Rotation speed factor
SPEED -> 1.0
SPEED := 1.0
// Radius of the sphere
RADIUS -> 1200
RADIUS := 1200

page_index -> 0.0
page_index := 0

MAX -> 270
MAX := 270

TIME_OFFSET -> 0.0
TIME_OFFSET := 0.0

show_image N : text ->
    image_index := image_index + 1
    page_index := ((page_time + TIME_OFFSET) * SPEED - image_index) mod MAX
    if page_index < SHOWN then
        if page_index * show_front < 0.5 * SHOWN * show_front then
            locally
                rotatey 90 - 360 * page_index / SHOWN
                rotatex (image_index mod 3) * 15 - 24
                translatez RADIUS - ((image_index - 1) mod 3) * 100
                image_px 0, 0, SIZE, 0, N



/******************************************************************************
*                                                                             *
*                                                                             *
*                                   Slider                                    *
*                                                                             *
*                                                                             *
*******************************************************************************/


// ============================================================================
//
//   Settings
//
// ============================================================================

// Positions of each item
slider_position_x -> 0.0
slider_position_y -> 0.0
slider_position_z -> 0.0

// Offsets of each item
slider_offset_x -> 0.0
slider_offset_x := 0.0
slider_offset_y -> 0.0
slider_offset_y := 0.0
slider_offset_z -> 0.0
slider_offset_z := 0.0

// Current slider item
slider_current_item -> 1

// Number of slider items
slider_count -> 0

// Velocity of transitions
slider_velocity -> 0.05
slider_velocity := 0.05

// Velocity of movement
slider_move -> 0.0
slider_move := 0.0

// Loop settings
slider_use_loop -> 0
slider_use_loop := 0

// Mouse sensibilities
slider_mouse_sx -> 0.0
slider_mouse_sx := 0.0
slider_mouse_sy -> 0.0
slider_mouse_sy := 0.0

// Maximum of shown items
slider_max_shown_items -> 0
slider_max_shown_items := 0

// ============================================================================
//
//   Settings commands
//
// ============================================================================

slider_offset x:real, y:real, z:real ->
// ----------------------------------------------------------------------------
//     Set offsets for slider effect
// ----------------------------------------------------------------------------
    slider_offset_x := x
    slider_offset_y := y
    slider_offset_z := z


slider_auto_move s:real ->
// ----------------------------------------------------------------------------
//    Define auto movement of the slider
// ----------------------------------------------------------------------------
    slider_move := s


slider_velocity s:real ->
// ----------------------------------------------------------------------------
//    Define velocity of the slider
// ----------------------------------------------------------------------------
    slider_velocity := s


slider_next ->
// ----------------------------------------------------------------------------
//    Go to the next item
// ----------------------------------------------------------------------------
    time
    if (slider_current_item < slider_count) or (slider_use_loop = 1) then
        slider_current_item := slider_current_item + 1


slider_previous ->
// ----------------------------------------------------------------------------
//    Go to the previous item
// ----------------------------------------------------------------------------
    time
    if (slider_current_item > 1) or (slider_use_loop = 1) then
        slider_current_item := slider_current_item - 1


slider_loop b:boolean ->
// ----------------------------------------------------------------------------
//    Set slider in looping mode
// ----------------------------------------------------------------------------
    if b then
        slider_use_loop := 1
    else
        slider_use_loop := 0


slider_max_items N:integer ->
// ----------------------------------------------------------------------------
//    Set maximum of shown items in the slider
// ----------------------------------------------------------------------------
    slider_max_shown_items := N


slider_front_item ->
// ----------------------------------------------------------------------------
//    Return the current front item
// ----------------------------------------------------------------------------
    ((slider_current_item - 1) mod slider_count) + 1


slider_front_item i:integer ->
// ----------------------------------------------------------------------------
//    Set the current front item
// ----------------------------------------------------------------------------
    time
    slider_current_item := i


slider_mouse -> 0.0
pos -> 1

slider_mouse_x sx:real ->
// ----------------------------------------------------------------------------
//    Move slider according to the x-position of the mouse
// ----------------------------------------------------------------------------
    if (sx > 0.0) then
        mouse_x
        locally
            enable_selection_rectangle false
            if mouse_buttons <> 0 then
                if slider_mouse = 0 then
                    slider_mouse := mouse_x
                else
                    step_x := (mouse_x - slider_mouse) * (sx / 10)
                    slider_current_item := (pos - integer step_x)
                    if (slider_use_loop = 0) then
                        if (slider_current_item > slider_count) then
                            slider_current_item := slider_count
                        else
                            if slider_current_item < 1 then
                                slider_current_item := 1
            else
                pos := slider_current_item
                slider_mouse := 0


slider_mouse_y sy:real ->
// ----------------------------------------------------------------------------
//    Move slider according to the y-position of the mouse
// ----------------------------------------------------------------------------
    if(sy > 0.0) then
        mouse_y
        locally
            enable_selection_rectangle false
            if mouse_buttons <> 0 then
                if slider_mouse = 0 then
                    slider_mouse := mouse_y
                else
                    step_y := (mouse_y - slider_mouse) * (sy / 10)
                    slider_current_item := (pos - integer step_y)
                    if (slider_use_loop = 0) then
                        if (slider_current_item > slider_count) then
                            slider_current_item := slider_count
                        else
                            if slider_current_item < 1 then
                                slider_current_item := 1
            else
                pos := slider_current_item
                slider_mouse := 0


// ============================================================================
//
//   Main command
//
// ============================================================================

i -> 0
drawing -> 0
middle -> 0
sx_inf -> 0.0
sx_sup -> 0.0
sy_inf -> 0.0
sy_sup -> 0.0
sz_inf -> 0.0
sz_sup -> 0.0


slider N:integer, T ->
// ----------------------------------------------------------------------------
//     Main function
// ----------------------------------------------------------------------------
    slider_count := N
    if slider_max_shown_items = 0 then
        slider_max_shown_items := N
    if slider_max_shown_items mod 2 = 0 then
        middle := slider_max_shown_items / 2
        sx_inf := middle * abs(slider_offset_x)
        sx_sup := sx_inf
        sy_inf := middle * abs(slider_offset_y)
        sy_sup := sy_inf
        sz_inf := middle * abs(slider_offset_z)
        sz_sup := sz_inf
    else
        middle := slider_max_shown_items / 2 + 1
        sx_inf := middle * abs(slider_offset_x)
        sx_sup := sx_inf - abs(slider_offset_x)
        sy_inf := middle * abs(slider_offset_y)
        sy_sup := sy_inf - abs(slider_offset_y)
        sz_inf := middle * abs(slider_offset_z)
        sz_sup := sz_inf - abs(slider_offset_z)
    locally
        compute_move
        locally
            if slider_offset_x <> 0.0 then
                interpolate2 slider_velocity, slider_offset_x * (1 - slider_current_item), slider_position_x, 0.1
            if slider_offset_y <> 0.0 then
                interpolate2 slider_velocity, slider_offset_y * (1 - slider_current_item), slider_position_y, 0.1
            if slider_offset_z <> 0.0 then
                interpolate2 slider_velocity, slider_offset_z * (1 - slider_current_item), slider_position_z, 0.1
            xs -> 0.0
            ys -> 0.0
            zs -> 0.0
            i := N
            e := 0
            if slider_use_loop = 1 then
                i := middle + slider_current_item
                e := slider_current_item - middle
            while i > e loop
                locally
                    drawing := 0
                    check_drawing xs, slider_offset_x, slider_position_x, sx_sup, sx_inf
                    check_drawing ys, slider_offset_y, slider_position_y, sy_sup, sy_inf
                    check_drawing zs, slider_offset_z, slider_position_z, sz_sup, sz_inf
                    if drawing = 1 then
                        translate xs, ys, zs
                        item := (i - 1) mod slider_count
                        T with item + 1
                    i := i - 1

check_drawing v:real, offset:real, position:real, sup:real, inf:real ->
    if offset > 0.0 then
        v := (i - 1) * offset + position
        if (((v - offset / 2) < sup) and ((-v + offset / 2) < inf)) then
            drawing := 1

    if offset < 0.0 then
        v := (i - 1) * offset + position
        if (((v - offset / 2) < inf) and ((-v + offset / 2) < sup)) then
            drawing := 1

// ============================================================================
//
//   Fade-in and fade-out functions
//
// ============================================================================

slider_fade_x Sx:real ->
// ----------------------------------------------------------------------------
//    Compute fade value for horizontal slider effects
// ----------------------------------------------------------------------------
    if slider_offset_x <> 0.0 then
        exp (-((i - 1 + slider_position_x / slider_offset_x) ^ 2) * Sx)
    else
        1

slider_fade_y Sy:real ->
// ----------------------------------------------------------------------------
//    Compute fade value for vertical slider effects
// ----------------------------------------------------------------------------
    if slider_offset_y <> 0.0 then
        exp (-((i - 1 + slider_position_y / slider_offset_y) ^ 2) * Sy)
    else
        1

slider_fade_z Sz:real ->
// ----------------------------------------------------------------------------
//    Compute fade value for depth slider effects
// ----------------------------------------------------------------------------
    if slider_offset_z <> 0.0 then
        exp (-((i - 1 + slider_position_z / slider_offset_z) ^ 2) * Sz)
    else
        1

slider_fade Sx:real, Sy:real, Sz:real ->
// ----------------------------------------------------------------------------
//    Compute fade value for standard slider effects
// ----------------------------------------------------------------------------
    x := slider_fade_x Sx
    y := slider_fade_y Sy
    z := slider_fade_z Sz
    x * y * z


// ============================================================================
//
//   Private
//
// ============================================================================

interpolate2 R:real, T:real, X:real, S:real ->
// ----------------------------------------------------------------------------
//     Interpolate only when necessary
// ----------------------------------------------------------------------------
    interpolate R, T, X
    if (abs (T - X)) > S then
        time


previous -> 0
compute_move ->
// ----------------------------------------------------------------------------
//     Compute automatic movement of the slider
// ----------------------------------------------------------------------------
    if slider_move > 0.0 then
        if (slider_use_loop = 1) then
            current := integer (slider_move mod slider_count) + 1
            if (previous <> current) then
                slider_next
                previous := current
        else
            slider_current_item := integer (slider_move mod slider_count) + 1
    if slider_move < 0.0 then
        if (slider_use_loop = 1) then
            current := integer (slider_move mod slider_count) + 1
            if (previous <> current) then
                slider_previous
                previous := current
        else
            slider_current_item := integer (slider_move mod slider_count) - 1



